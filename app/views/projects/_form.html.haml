= form_for @project, html: { class: 'form-horizontal' } do |f|
  - if @project.errors.any?
    #error_explanation
      %p.lead= "#{pluralize(@project.errors.count, "error")} prohibited this project from being saved:"
      .alert.alert-error
        %ul
          - @project.errors.full_messages.each do |msg|
            %li= msg

  %fieldset
    %legend Build settings
    .form-group
      = label_tag nil, class: 'control-label' do
        Build method
      .col-sm-10
        %p Select the way project is built:
        .radio
          = label_tag do
            = f.radio_button :build_method, 'shell', :class => 'build_method build_method_shell'
            %strong Shell
            .light Use shell defined below
        .radio
          = label_tag do
            = f.radio_button :build_method, 'travis', :class => 'build_method build_method_travis'
            %strong Travis-CI
            .light Use Travis-CI compatibility layer

    .form-group#form_group_travis_environment
      = f.label :travis_environment, 'Travis environment', class: 'control-label'
      .col-sm-10
        = f.text_area :travis_environment, class: 'form-control', rows: 14, placeholder: "KEY1=VALUE1"
        .bs-callout.bs-callout-info
          %p
            Enter one environment variable per line.
            %br
            When the key is prefixed with @ value will be hidden from build trace.
            %br
            Use it when you want to pass secrets or password to build script.

    .form-group#form_group_scripts
      = f.label :scripts, 'Build steps', class: 'control-label'
      .col-sm-10
        = f.text_area :scripts, class: 'form-control', rows: 14, placeholder: "bundle exec rake spec"
        .bs-callout.bs-callout-info
          %p
            All lines will be concatenated in one file and executed.
            %br
            If you change the working directory or the environment in one line - it will affect the next lines too

    .form-group#form_group_allow_git_fetch
      = label_tag nil, class: 'control-label' do
        Get code
      .col-sm-10
        %p Get recent application code using the following command:
        .radio
          = label_tag do
            = f.radio_button :allow_git_fetch, 'false'
            %strong git clone
            .light Slower but makes sure you have a clean dir before every build
        .radio
          = label_tag do
            = f.radio_button :allow_git_fetch, 'true'
            %strong git fetch
            .light Faster

    .form-group#form_group_build_os
      = f.label :build_os, "Specify build OS", class: 'control-label'
      .col-sm-10
        = f.text_field :build_os, class: 'form-control', placeholder: 'linux'
        .light You will be able to specify base operating system on which project should be run: linux, windows or osx.

    .form-group#form_group_build_image
      = f.label :build_image, "Specify build image", class: 'control-label'
      .col-sm-10
        = f.text_field :build_image, class: 'form-control', placeholder: 'ubuntu:14.04'
        .light You will be able to specify base image to be used for docker runner.

    .form-group
      = f.label :timeout_in_minutes, 'Timeout', class: 'control-label'
      .col-sm-10
        = f.number_field :timeout_in_minutes, class: 'form-control', min: '0'
        .light per build in minutes


  %fieldset
    %legend Build Schedule
    .form-group
      = f.label :always_build, 'Schedule build', class: 'control-label'
      .col-sm-10
        .checkbox
          = f.label :always_build do
            = f.check_box :always_build
            %span.light Repeat last build after X hours if no builds
    .form-group
      = f.label :polling_interval, "Build interval", class: 'control-label'
      .col-sm-10
        = f.number_field :polling_interval, placeholder: '5', min: '0', class: 'form-control'
        .light In hours

  %fieldset
    %legend Project settings
    .form-group
      = f.label :default_ref, "Make tabs for the following branches", class: 'control-label'
      .col-sm-10
        = f.text_field :default_ref, class: 'form-control', placeholder: 'master, stable'
        .light You will be able to filter builds by the following branches
    .form-group
      = f.label :public, 'Public mode', class: 'control-label'
      .col-sm-10
        .checkbox
          = f.label :public do
            = f.check_box :public
            %span.light Anyone can see project and builds list
    .form-group
      = f.label :coverage_regex, "Test coverage parsing", class: 'control-label'
      .col-sm-10
        .input-group
          %span.input-group-addon /
          = f.text_field :coverage_regex, class: 'form-control', placeholder: '\(\d+.\d+\%\) covered'
          %span.input-group-addon /
        .light We will use this regular expression to find test coverage output in build trace. Leave blank if you want to disable this feature
        .bs-callout.bs-callout-info
          %p Below are examples of regex for existing tools:
          %ul
            %li
              Simplecov (Ruby) -
              %code \(\d+.\d+\%\) covered



  %fieldset
    %legend Email notification
    .form-group
      = f.label :email_recipients, "Recipients", class: 'control-label'
      .col-sm-10
        = f.text_field :email_recipients, class: 'form-control'
        .light Whitespace-separated list of recipient addresses
    .form-group
      .col-sm-2
      .col-sm-10
        .checkbox
          = f.label :email_add_committer do
            = f.check_box :email_add_committer
            %span Add committer to recipients list
    .form-group
      .col-sm-2
      .col-sm-10
        .checkbox
          = f.label :email_only_broken_builds do
            = f.check_box :email_only_broken_builds
            %span Send notification only for broken builds

  %fieldset
    %legend Slack notification
    .form-group
      = f.label :slack_notification_subdomain, "Subdomain", class: 'control-label'
      .col-sm-10
        = f.text_field :slack_notification_subdomain, class: 'form-control'
    .form-group
      = f.label :slack_notification_token, "Token", class: 'control-label'
      .col-sm-10
        = f.text_field :slack_notification_token, class: 'form-control'
    .form-group
      = f.label :slack_notification_username, "Username", class: 'control-label'
      .col-sm-10
        = f.text_field :slack_notification_username, class: 'form-control'
    .form-group
      = f.label :slack_notification_channel, "Channel", class: 'control-label'
      .col-sm-10
        = f.text_field :slack_notification_channel, class: 'form-control'
        .light Slack channel to post in, starting with a '#'
    .form-group
      .col-sm-2
      .col-sm-10
        .checkbox
          = f.label :slack_only_broken_builds do
            = f.check_box :slack_only_broken_builds
            %span Send notification only for broken builds

  %fieldset
    %legend Advanced settings
    .form-group
      = f.label :name, class: 'control-label'
      .col-sm-10
        = f.text_field :name, class: 'form-control', placeholder: 'my-project'
    .form-group
      = f.label :gitlab_url, "GitLab url to project", class: 'control-label'
      .col-sm-10
        = f.text_field :gitlab_url, class: 'form-control', placeholder: 'http://gitlab.domain.com/project-slug'
    .form-group
      = f.label :gitlab_id, "GitLab project id", class: 'control-label'
      .col-sm-10
        = f.text_field :gitlab_id, class: 'form-control', placeholder: '17'
    .form-group
      = f.label :private_token, "GitLab API private token", class: 'control-label'
      .col-sm-10
        = f.text_field :private_token, class: 'form-control', placeholder: 'xEeFCaDAB89'
    .form-group
      = f.label :token, "CI token", class: 'control-label'
      .col-sm-10
        = f.text_field :token, class: 'form-control', placeholder: 'xEeFCaDAB89'
    .form-group
      = f.label :skip_refs, "Skip refs", class: 'control-label'
      .col-sm-10
        = f.text_field :skip_refs, class: 'form-control', placeholder: 'branch1, branch2'

  .form-actions
    = f.submit 'Save changes', class: 'btn btn-save'
    = link_to 'Cancel', projects_path, class: 'btn'
    - unless @project.new_record?
      = link_to 'Remove Project', project_path(@project), method: :delete, data: { confirm: 'Project will be removed. Are you sure?' }, class: 'btn btn-danger pull-right'

:javascript
  $(".build_method").on("change", function() {
    $("#form_group_travis_environment").toggle($(this).hasClass("build_method_travis"));
    $("#form_group_scripts").toggle($(this).hasClass("build_method_shell"));
    $("#form_group_allow_git_fetch").toggle($(this).hasClass("build_method_shell"));
    $("#form_group_build_os").toggle($(this).hasClass("build_method_shell"));
    $("#form_group_build_image").toggle($(this).hasClass("build_method_shell"));
  });

  $("#form_group_travis_environment").toggle("#{@project.build_method}" == "travis");
  $("#form_group_scripts").toggle("#{@project.build_method}" == "shell");
  $("#form_group_allow_git_fetch").toggle("#{@project.build_method}" == "shell");
  $("#form_group_build_os").toggle("#{@project.build_method}" == "shell");
  $("#form_group_build_image").toggle("#{@project.build_method}" == "shell");
